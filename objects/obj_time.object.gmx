<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i;
if (os_type == os_windows)
    global.osflavor = 1
else if (os_type == os_ps4 || os_type == os_psvita)
    global.osflavor = 4
else
    global.osflavor = 2
global.locale = ((os_get_language() + "_") + string_upper(os_get_region()))
if (global.osflavor &gt;= 3)
{
    application_surface_enable(true)
    application_surface_draw_enable(false)
}
global.savedata_async_id = -1
global.savedata_async_load = 0
global.savedata_error = 0
global.savedata_debuginfo = ""
global.disable_os_pause = 0
paused = false
idle = 0
idle_time = 0
up = 0
down = 0
left = 0
right = 0
quit = 0
try_up = 0
try_down = 0
try_left = 0
try_right = 0
canquit = 1
h_skip = 0
j_xpos = 0
j_ypos = 0
j_dir = 0
j_fr = 0
j_fl = 0
j_fu = 0
j_fd = 0
j_fr_p = 0
j_fl_p = 0
j_fu_p = 0
j_fd_p = 0
for (i = 0; i &lt; 12; i += 1)
{
    j_prev[i] = 0
    j_on[i] = 0
}
global.button0 = 2
global.button1 = 1
global.button2 = 4
global.analog_sense = 0.15
global.analog_sense_sense = 0.01
global.joy_dir = 0
if (os_type == os_ps4 || os_type == os_psvita)
{
    if (substr(global.locale, 1, 2) == "ja")
    {
        global.button0 = gp_face2
        global.button1 = gp_face1
    }
    else
    {
        global.button0 = gp_face1
        global.button1 = gp_face2
    }
    global.button2 = gp_face4
}
global.default_button0 = global.button0
global.default_button1 = global.button1
global.default_button2 = global.button2
global.default_analog_sense = global.analog_sense
global.default_analog_sense_sense = global.analog_sense_sense
global.default_joy_dir = global.joy_dir
global.screen_border_id = 0
global.screen_border_active = false
global.screen_border_alpha = 1
global.screen_border_state = 0
global.screen_border_dynamic_fade_id = 0
global.screen_border_dynamic_fade_level = 0
global.screen_border_activate_on_game_over = 0
debug_r = 0
debug_f = 0
j1 = 0
j2 = 0
ja = 0
j_ch = 0
jt = 0
if (global.osflavor &gt;= 4)
{
    j_ch = 1
    for (i = 0; i &lt; gamepad_get_device_count(); i++)
    {
        if gamepad_is_connected(i)
            j_ch = (i + 1)
    }
}
spec_rtimer = 0
global.endsong_loaded = 0
control_init()
scr_kanatype_init()

if (!variable_global_exists("text_data_en"))
{
    script_execute(textdata_en)
    script_execute(textdata_yellow_en)
}
if (!variable_global_exists("text_data_ja"))
{
    script_execute(textdata_ja)
    script_execute(textdata_yellow_ja)
}
global.language = substr(global.locale, 1, 2)
if (global.language != "ja")
    global.language = "en"
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (canquit == 1)
{
    if (quit &gt; 20)
    {
        if (global.osflavor &lt;= 2)
            game_end()
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var lang, sb_i, b0_i, b1_i, b2_i, as_i, jd_i, analog_sense, j_xpos, j_ypos, angle, now_idle;
if (started &lt;= 0)
{
    if (global.savedata_async_id &gt;= 0)
        exit
    started = -1
    ossafe_ini_open("config.ini")
    lang = ini_read_string("General", "lang", "")
    sb_i = ini_read_real("General", "sb", -1)
    b0_i = ini_read_real("joypad1", "b0", -1)
    b1_i = ini_read_real("joypad1", "b1", -1)
    b2_i = ini_read_real("joypad1", "b2", -1)
    as_i = ini_read_real("joypad1", "as", -1)
    jd_i = ini_read_real("joypad1", "jd", -1)
    if (string_length(lang) &gt; 0)
        global.language = lang
    if (sb_i &gt;= 0)
        global.screen_border_id = sb_i
    if (b0_i &gt;= 0)
        global.button0 = b0_i
    if (b1_i &gt;= 0)
        global.button1 = b1_i
    if (b2_i &gt;= 0)
        global.button2 = b2_i
    if (as_i &gt;= 0)
        global.analog_sense = as_i
    if (jd_i &gt;= 0)
        global.joy_dir = jd_i
    ossafe_ini_close()
    scr_enable_screen_border(global.osflavor &gt;= 4)
    if (global.osflavor &gt;= 4)
    {
        global.analog_sense = 0.15
        if (os_type == os_psvita)
            global.analog_sense = 0.9
        global.joy_dir = 0
    }
    ossafe_ini_open("undertale.ini")
    fskip = ini_read_real("FFFFF", "E", -1)
    ftime = ini_read_real("FFFFF", "F", -1)
    true_end = ini_read_real("EndF", "EndF", -1)
    ossafe_ini_close()
    sksk = 0
    if (ftime == 1)
    {
        sksk = 1
        room_goto(room_f_start)
    }
    if (true_end == 1 &amp;&amp; sksk == 0)
    {
        sksk = 1
        room_goto(room_flowey_regret)
    }
    if (fskip &gt;= 1 &amp;&amp; sksk == 0)
    {
        global.filechoice = 8
        scr_load()
        if (fskip == 1)
            room_goto(room_flowey_endchoice)
        if (fskip == 2)
            room_goto(room_castle_exit)
    }
    else if (sksk == 0)
        //what even is this variable? idk lol SUS MARKER
        room_goto_next()
    if (ossafe_file_exists("system_information_962") &amp;&amp; (!ossafe_file_exists("system_information_963")))
        room_goto(room_nothingness)
    started = 1
    exit
}
if (!paused)
    time += 1
if (global.osflavor &lt;= 2)
{
    if (jt == 0)
    {
        if (j_ch != 2)
        {
            if joystick_exists(1)
                j_ch = 1
            else if (j_ch == 1)
                j_ch = 0
        }
    }
    if (jt == 4)
    {
        if (j_ch != 1)
        {
            if joystick_exists(2)
                j_ch = 2
            else if (j_ch == 2)
                j_ch = 0
        }
    }
    jt += 1
    if (jt &gt;= 8)
        jt = 0
}
control_update()
if (j_ch &gt; 0)
{
    j_fr_p = j_fr
    j_fl_p = j_fl
    j_fu_p = j_fu
    j_fd_p = j_fd
    j_fr = 0
    j_fl = 0
    j_fu = 0
    j_fd = 0
    if (global.osflavor &gt;= 4)
    {
        if (gamepad_button_check((j_ch - 1), gp_padu) || gamepad_button_check((j_ch - 1), gp_padd) || gamepad_button_check((j_ch - 1), gp_padl) || gamepad_button_check((j_ch - 1), gp_padr))
        {
            j_fu = gamepad_button_check((j_ch - 1), gp_padu)
            j_fd = gamepad_button_check((j_ch - 1), gp_padd)
            j_fl = gamepad_button_check((j_ch - 1), gp_padl)
            j_fr = gamepad_button_check((j_ch - 1), gp_padr)
        }
        else if (global.joy_dir != 2)
        {
            j_xpos = gamepad_axis_value((j_ch - 1), gp_axislh)
            j_ypos = gamepad_axis_value((j_ch - 1), gp_axislv)
            analog_sense = global.analog_sense
            if (sqrt((sqr(j_xpos) + sqr(j_ypos))) &gt;= analog_sense)
            {
                angle = darctan2(j_ypos, j_xpos)
                if (angle &lt; 0)
                    angle += 360
                if (angle &lt; 67.5 || angle &gt; 292.5)
                    j_fr = 1
                if (angle &gt; 22.5 &amp;&amp; angle &lt; 157.5)
                    j_fd = 1
                if (angle &gt; 112.5 &amp;&amp; angle &lt; 247.5)
                    j_fl = 1
                if (angle &gt; 202.5 &amp;&amp; angle &lt; 337.5)
                    j_fu = 1
            }
        }
    }
    else
    {
        if (global.joy_dir == 0 || global.joy_dir == 1)
        {
            j_xpos = joystick_xpos(j_ch)
            j_ypos = joystick_ypos(j_ch)
        }
        j_dir = joystick_direction(j_ch)
        if (global.joy_dir == 0 || global.joy_dir == 1)
        {
            if (j_dir == 101)
            {
                if (j_xpos &gt;= global.analog_sense)
                    j_fr = 1
                if (j_xpos &lt;= (-global.analog_sense))
                    j_fl = 1
                if (j_ypos &gt;= global.analog_sense)
                    j_fd = 1
                if (j_ypos &lt;= (-global.analog_sense))
                    j_fu = 1
            }
        }
        if (j_dir != 101)
        {
            if (j_dir == 100)
                j_fl = 1
            if (j_dir == 98)
                j_fd = 1
            if (j_dir == 102)
                j_fr = 1
            if (j_dir == 104)
                j_fu = 1
            if (j_dir == 99)
            {
                j_fr = 1
                j_fd = 1
            }
            if (j_dir == 97)
            {
                j_fd = 1
                j_fl = 1
            }
            if (j_dir == 103)
            {
                j_fu = 1
                j_fl = 1
            }
            if (j_dir == 105)
            {
                j_fu = 1
                j_fr = 1
            }
        }
        if (global.joy_dir == 0 || global.joy_dir == 2)
        {
            j_pov = joystick_pov(j_ch)
            if (j_pov == 0)
                j_fu = 1
            if (j_pov == 270)
                j_fl = 1
            if (j_pov == 90)
                j_fr = 1
            if (j_pov == 180)
                j_fd = 1
            if (j_pov == 315)
            {
                j_fu = 1
                j_fl = 1
            }
            if (j_pov == 45)
            {
                j_fu = 1
                j_fr = 1
            }
            if (j_pov == 225)
            {
                j_fd = 1
                j_fl = 1
            }
            if (j_pov == 135)
            {
                j_fd = 1
                j_fr = 1
            }
        }
    }
    if (j_fr != j_fr_p &amp;&amp; j_fr == 1)
        keyboard_key_press(vk_right)
    if (j_fl != j_fl_p &amp;&amp; j_fl == 1)
        keyboard_key_press(vk_left)
    if (j_fd != j_fd_p &amp;&amp; j_fd == 1)
        keyboard_key_press(vk_down)
    if (j_fu != j_fu_p &amp;&amp; j_fu == 1)
        keyboard_key_press(vk_up)
    if (j_fr != j_fr_p &amp;&amp; j_fr == 0)
        keyboard_key_release(vk_right)
    if (j_fl != j_fl_p &amp;&amp; j_fl == 0)
        keyboard_key_release(vk_left)
    if (j_fd != j_fd_p &amp;&amp; j_fd == 0)
        keyboard_key_release(vk_down)
    if (j_fu != j_fu_p &amp;&amp; j_fu == 0)
        keyboard_key_release(vk_up)
}
up = 0
down = 0
left = 0
right = 0
if keyboard_check(vk_up)
    try_up = 1
if keyboard_check_released(vk_up)
    try_up = 0
if keyboard_check(vk_down)
    try_down = 1
if keyboard_check_released(vk_down)
    try_down = 0
if keyboard_check(vk_right)
    try_right = 1
if keyboard_check_released(vk_right)
    try_right = 0
if keyboard_check(vk_left)
    try_left = 1
if keyboard_check_released(vk_left)
    try_left = 0
if (global.osflavor == 1)
{
    if try_up
        up = keyboard_check_direct(vk_up)
    if try_down
        down = keyboard_check_direct(vk_down)
    if try_left
        left = keyboard_check_direct(vk_left)
    if try_right
        right = keyboard_check_direct(vk_right)
}
else
{
    if try_up
        up = keyboard_check(vk_up)
    if try_down
        down = keyboard_check(vk_down)
    if try_left
        left = keyboard_check(vk_left)
    if try_right
        right = keyboard_check(vk_right)
}
if keyboard_check_released(vk_up)
    up = 0
if keyboard_check_released(vk_down)
    down = 0
if keyboard_check_released(vk_left)
    left = 0
if keyboard_check_released(vk_right)
    right = 0
now_idle = (!((up || down || left || right || control_check(0) || control_check(1) || control_check(2))))
if (now_idle &amp;&amp; (!idle))
    idle_time = current_time
idle = now_idle
if control_check(2)
{
    if (global.flag[28] == 1)
    {
        if (instance_exists(OBJ_WRITER) &amp;&amp; (!instance_exists(obj_choicer)))
        {
            if (h_skip == 0)
            {
                keyboard_key_press(ord("X"))
                keyboard_key_press(ord("Z"))
            }
            if (h_skip == 1)
            {
                keyboard_key_release(ord("Z"))
                keyboard_key_release(ord("X"))
            }
            if (h_skip == 0)
                h_skip = 1
            else
                h_skip = 0
        }
    }
}
if (global.debug == true)
{
    if keyboard_check_pressed(ord("F"))
        room_speed = 200
}
if (global.debug == true)
{
    if keyboard_check_pressed(ord("W"))
        room_speed = 10
}
if keyboard_check_pressed(vk_f4)
{
    if window_get_fullscreen()
        window_set_fullscreen(false)
    else
        window_set_fullscreen(true)
}
if (canquit == 1)
{
    if (global.debug == true)
    {
        if (keyboard_check_pressed(ord("R")) &amp;&amp; instance_exists(obj_essaystuff) == 0)
        {
            debug_r += 1
            if (debug_r &gt; 5)
                game_restart()
            spec_rtimer = 1
        }
    }
    spec_rtimer += 1
    if (spec_rtimer &gt;= 6)
        debug_r = 0
    if keyboard_check(vk_escape)
    {
        quit += 1
        if (instance_exists(obj_quittingmessage) == 0)
            instance_create(0, 0, obj_quittingmessage)
    }
    else
        quit = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var type, json;
if (ds_map_find_value(async_load, "id") == global.savedata_async_id)
{
    global.savedata_async_id = -1
    if global.savedata_async_load
        type = "load"
    else
        type = "save"
    if (ds_map_find_value(async_load, "status") &lt; 0)
    {
        global.savedata_error = 1
        global.savedata_debuginfo = ((type + " failed: ") + string(ds_map_find_value(async_load, "status")))
        if global.savedata_async_load
            global.savedata = ds_map_create()
    }
    else
    {
        global.savedata_error = 0
        global.savedata_debuginfo = (type + " succeeded")
        if global.savedata_async_load
        {
            json = buffer_read(global.savedata_buffer, buffer_string)
            global.savedata = json_decode(json)
        }
    }
    buffer_delete(global.savedata_buffer)
    global.savedata_buffer = undefined
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SCR_GAMESTART(0, 0, 0, 0, 0)
time = 0
image_speed = 0
jjjjjj = 0
repeat (20)
{
    global.tempvalue[jjjjjj] = 0
    jjjjjj += 1
}
ossafe_savedata_load()
started = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ww, wh, sw, sh, xx, yy, lineheight, line1, dot, line2, width1, width2, width, i;
if (global.osflavor &gt;= 3)
{
    ww = window_get_width()
    wh = window_get_height()
    sw = surface_get_width(application_surface)
    sh = surface_get_height(application_surface)
    xx = floor(((ww - (sw * global.window_scale)) / 2))
    yy = floor(((wh - (sh * global.window_scale)) / 2))
    global.window_xofs = xx
    global.window_yofs = yy
    texture_set_interpolation(false)
    if (global.screen_border_active &amp;&amp; global.screen_border_alpha &gt; 0)
    {
        scr_draw_screen_border(global.screen_border_id)
        if (global.screen_border_alpha &lt; 1)
        {
            draw_set_alpha((1 - global.screen_border_alpha))
            draw_set_color(c_black)
            ossafe_fill_rectangle(0, 0, (ww - 1), (wh - 1))
            draw_set_alpha(1)
            draw_set_color(c_white)
        }
    }
    draw_enable_alphablend(false)
    draw_surface_ext(application_surface, xx, yy, global.window_scale, global.window_scale, 0, c_white, 1)
    draw_enable_alphablend(true)
}
else
{
    global.window_xofs = 0
    global.window_yofs = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ww, wh, sw, sh, scale_w, scale_h;
ww = window_get_width()
wh = window_get_height()
sw = surface_get_width(application_surface)
sh = surface_get_height(application_surface)
scale_w = (ww / sw)
scale_h = (wh / sh)
if (global.osflavor &gt;= 4)
    global.window_scale = floor(min(scale_w, scale_h))
else
    global.window_scale = min(scale_w, scale_h)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.osflavor &gt;= 3)
{
    if (os_is_paused() &amp;&amp; (!paused) &amp;&amp; (!global.disable_os_pause))
    {
        paused = true
        audio_pause_all()
        instance_deactivate_all(true)
    }
    else if ((!os_is_paused()) &amp;&amp; paused)
    {
        instance_activate_all()
        audio_resume_all()
        paused = false
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.debug == true)
{
    draw_set_font(fnt_maintext)
    draw_set_color(c_white)
    draw_text(10, 10, round((time / 30)))
    draw_text(10, 30, global.savedata_debuginfo)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="114">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.debug == true)
{
    gx = ossafe_file_text_open_write("system_information_962")
    ossafe_file_text_write_string(gx, "a")
    ossafe_file_text_close(gx)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
