<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// obj_uborder
// set size
obj_uborder.size = round((global.idealborder[1] - global.idealborder[0]) / 5)

// set instantly
if ((obj_uborder.instaborder == 1))
{
    obj_uborder.x = global.idealborder[0]
    obj_uborder.y = global.idealborder[2]
    obj_uborder.image_xscale = obj_uborder.size
}

// set slowly
else
{
    // set X
    obj_uborder.x += min(max(global.idealborder[0] - obj_uborder.x, -15), 15)

    // set Y instantly (for lemon bread)
    if ((obj_uborder.instant == 1))
    {
        obj_uborder.y = global.idealborder[2]
    }

    // set Y slowly
    else if (obj_uborder.x == global.idealborder[0] || obj_uborder.y &lt; global.idealborder[2])
    {
        obj_uborder.y += min(max(global.idealborder[2] - obj_uborder.y, -15), 15)
    }

    // set scale
    obj_uborder.image_xscale += min(max(obj_uborder.size - obj_uborder.image_xscale, -6), 6)
}

// obj_dborder
// set size
obj_dborder.size = round((global.idealborder[1] - global.idealborder[0]) / 5) + 1

// set instantly
if ((obj_dborder.instaborder == 1))
{
    obj_dborder.x = global.idealborder[0]
    obj_dborder.y = global.idealborder[3]
    obj_dborder.image_xscale = obj_dborder.size
}

// set slowly
else
{
    obj_dborder.x += min(max(global.idealborder[0] - obj_dborder.x, -15), 15)
    obj_dborder.y += min(max(global.idealborder[3] - obj_dborder.y, -15), 15)
    obj_dborder.image_xscale += min(max(obj_dborder.size - obj_dborder.image_xscale, -6), 6)
}

// obj_lborder
// set size
obj_lborder.size = round((global.idealborder[2] - global.idealborder[3]) / 5)

// set instantly
if (obj_lborder.instaborder == 1)
{
    obj_lborder.x = global.idealborder[0]
    obj_lborder.y = global.idealborder[2]
    obj_lborder.image_yscale = -obj_lborder.size
}

// set slowly
else {
    obj_lborder.x += min(max(global.idealborder[0] - obj_lborder.x, -15), 15)
    obj_lborder.y = obj_dborder.y
    obj_lborder.image_yscale = (obj_uborder.y - obj_dborder.y) / 5
}

// obj_rborder
// set size
obj_rborder.size = ceil((global.idealborder[2] - global.idealborder[3]) / 5)

// set instantly
if (obj_rborder.instaborder == 1)
{
    obj_rborder.x = global.idealborder[1]
    obj_rborder.y = global.idealborder[3]
    obj_rborder.image_yscale = -obj_rborder.size;
}

// set slowly
else {
    obj_rborder.x += min(max(global.idealborder[1] - obj_rborder.x, -15), 15)
    obj_rborder.y = obj_dborder.y
    obj_rborder.image_yscale = ((obj_uborder.y - obj_dborder.y) / 5)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
