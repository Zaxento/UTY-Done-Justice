<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((x % 3) == 2)
    x += 1
if ((x % 3) == 1)
    x -= 1
if ((y % 3) == 2)
    y += 1
if ((y % 3) == 1)
    y -= 1
lastfacing = 0
nnn = 0
cutscene = false
can_move = false
oldx = x
oldy = y
image_speed = 0
global.phasing = 0
facing = 0
moving = false
movement = 1
global.currentroom = room
dsprite = spr_maincharad
rsprite = spr_maincharar
usprite = spr_maincharau
lsprite = spr_maincharal
if (facing == 0)
    sprite_index = dsprite
if (facing == 1)
    sprite_index = rsprite
if (facing == 2)
    sprite_index = usprite
if (facing == 3)
    sprite_index = lsprite
inwater = 0
h_skip = 0
uncan = 0
m_override = 0

up = 0
down = 0
left = 0
right = 0
quit = 0
try_up = 0
try_down = 0
try_left = 0
try_right = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check(vk_left) == 0)
{
    if (keyboard_check(vk_right) == 0)
    {
        if (keyboard_check(vk_down) == 0)
        {
            if (keyboard_check(vk_up) == 0)
                moving = false
        }
    }
}

if (xprevious != x || yprevious != y)
    moving = true
if (moving == false)
{
    image_speed = 0
    image_index = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y

//Input detection

    if try_up
        up = keyboard_check_direct(vk_up)
    if try_down
        down = keyboard_check_direct(vk_down)
    if try_left
        left = keyboard_check_direct(vk_left)
    if try_right
        right = keyboard_check_direct(vk_right)
        
if keyboard_check_released(vk_up)
    up = 0
if keyboard_check_released(vk_down)
    down = 0
if keyboard_check_released(vk_left)
    left = 0
if keyboard_check_released(vk_right)
    right = 0

if (facing == 0)
    sprite_index = dsprite
if (facing == 1)
    sprite_index = rsprite
if (facing == 2)
    sprite_index = usprite
if (facing == 3)
    sprite_index = lsprite
if (collision_point((bbox_left - 3), (bbox_top - 3), obj_solid, 0, 1) == -4)
    crumpet = 1
else
    crumpet = 2
strumpet = bbox_top
trumpet = bbox_left

if keyboard_check(global.but_left)
{
    if (movement == 1)
    {
        turned = 1
        if (xprevious == (x + 3))
            x -= 2
        else
            x -= 3
        if (moving != true)
            image_index = 1
        moving = true
        if debug_mode = true
        {
            if keyboard_check(vk_backspace)
                x -= 5
        }
        image_speed = 0.2
        if (keyboard_check(global.but_up) &amp;&amp; facing == 2)
            turned = 0
        if (keyboard_check(global.but_down) &amp;&amp; facing == 0)
            turned = 0
        if (turned == 1)
            facing = 3
    }
}
if keyboard_check(global.but_up)
{
    if (movement == 1)
    {
        turned = 1
        y -= 3
        if debug_mode = true
        {
            if keyboard_check(vk_backspace)
                y -= 5
        }
        if (moving != true)
            image_index = 1
        moving = true
        image_speed = 0.2
        if (keyboard_check(global.but_right) &amp;&amp; facing == 1)
            turned = 0
        if (keyboard_check(global.but_left) &amp;&amp; facing == 3)
            turned = 0
        if (turned == 1)
            facing = 2
    }
}
if keyboard_check(global.but_right)
{
    if (movement == 1)
    {
        if (keyboard_check(vk_left) == 0)
        {
            turned = 1
            if (xprevious == (x - 3))
                x += 2
            else
                x += 3
            if debug_mode = true
            {
                if keyboard_check(vk_backspace)
                    x += 5
            }
            moving = true
            image_speed = 0.2
            if (moving != true)
                image_index = 1
            if (keyboard_check(global.but_up) &amp;&amp; facing == 2)
                turned = 0
            if (keyboard_check(global.but_down) &amp;&amp; facing == 0)
                turned = 0
            if (turned == 1)
                facing = 1
        }
    }
}
if keyboard_check(global.but_down)
{
    if (movement == 1)
    {
        if (keyboard_check(vk_up) == 0)
        {
            turned = 1
            y += 3
            if debug_mode = true
            {
                if keyboard_check(vk_backspace)
                    y += 5
            }
            if (moving != true)
                image_index = 1
            moving = true
            image_speed = 0.2
            if (keyboard_check(global.but_right) &amp;&amp; facing == 1)
                turned = 0
            if (keyboard_check(global.but_left) &amp;&amp; facing == 3)
                turned = 0
            if (turned == 1)
                facing = 0
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solidnpcparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.phasing == 0)
{
    x = xprevious
    y = yprevious
    moving = false
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solidparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.phasing == 0 &amp;&amp; other.phase == 0)
{
    x = xprevious
    y = yprevious
    if (global.interact == 0)
    {
        if obj_time.up
        {
            if (collision_rectangle((x + 2), (y + 15), (x + 18), (y + 19), obj_solidparent, 0, 1) &gt; 0)
            {
                if (obj_time.left &amp;&amp; collision_line((bbox_left - 3), bbox_top, bbox_left, bbox_top, obj_solidparent, false, true) &lt; 0)
                {
                    x -= 3
                    global.facing = 3
                }
                if (obj_time.right &amp;&amp; collision_line((bbox_right + 3), bbox_top, bbox_right, bbox_top, obj_solidparent, false, true) &lt; 0)
                {
                    x += 3
                    global.facing = 1
                }
            }
            else
            {
                y -= 3
                global.facing = 2
            }
        }
        if obj_time.down
        {
            if (collision_rectangle((x + 2), (y + 30), (x + 18), (y + 33), obj_solidparent, 0, 1) &gt; 0)
            {
                if (obj_time.left &amp;&amp; collision_line((bbox_left - 3), bbox_bottom, bbox_left, bbox_bottom, obj_solidparent, false, true) &lt; 0)
                {
                    x -= 3
                    global.facing = 3
                }
                if (obj_time.right &amp;&amp; collision_line((bbox_right + 3), bbox_bottom, bbox_right, bbox_bottom, obj_solidparent, false, true) &lt; 0)
                {
                    x += 3
                    global.facing = 1
                }
            }
            else
            {
                y += 3
                global.facing = 0
            }
        }
    }
    moving = false
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
