<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !debug_mode
{
    instance_destroy();
    exit;
}
writedisplay = false;
drawinfo = false;
interactshower = false;
showall = false;
objectselected = noone;
showmenu = false;
remx = 0;
remy = 0;
drawwindow = false;
holding = 0;
instance_create(0, 0, obj_roomselector);
if instance_number(obj_debugcontroller) &gt; 1
    instance_destroy();
hold = 0;
cutscenechecker = true;
overlay = false;
waitforit = false;
freemode = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !debug_mode
{
    instance_destroy();
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !debug_mode
{
    instance_destroy();
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!debug_mode)
{
    instance_destroy()
    exit;
}
if (keyboard_check(vk_shift) &amp;&amp; keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord("P")))
{
    var dump_date = ((((((((((string(date_get_year(date_current_datetime())) + "_") + string(date_get_month(date_current_datetime()))) + "_") + string(date_get_day(date_current_datetime()))) + "_") + string(date_get_hour(date_current_datetime()))) + "_") + string(date_get_minute(date_current_datetime()))) + "_") + string(date_get_second(date_current_datetime())))
    ini_open((("activeObjectList_" + dump_date) + ".txt"))
    ini_write_string("objects", "total number of objects at call", string(instance_count))
    with (all)
    {
        var sid = (("[" + string(id)) + "]")
        var writestring = object_get_name(object_index)
        if (persistent == 1)
            writestring += " [persistent object]"
        if (visible == false)
            writestring += " [not visible]"
        ini_write_string("objects", sid, writestring)
    }
    ini_close()
    audio_play_sound(snd_dumbvictory,80,false);
    //file_text_open_read((("activeObjectList_" + dump_date) + ".txt"))
}
if (keyboard_check(vk_shift) &amp;&amp; keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord("G")))
{
    global.chemg_god_mode = (true - global.chemg_god_mode)
    if (global.chemg_god_mode == true)
        audio_sound_pitch(snd_item, 1.5)
        audio_play_sound(snd_item,100,false)
    if (global.chemg_god_mode == false)
        audio_sound_pitch(snd_item, 0.5)
        audio_play_sound(snd_item,100,false)
}
if (global.chemg_god_mode == true)
{
    if (global.hp &lt; global.maxhp)
        global.hp = (global.hp + 1)
}
if (keyboard_check(vk_shift) &amp;&amp; keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord("D")))
{
    if (writedisplay == false)
        writedisplay = true
    else
        writedisplay = false
    for (i = (array_length_1d(global.flag) - 1); i &gt; -1; i--)
        lastval[i] = global.flag[i]
    audio_sound_pitch(snd_txttor, 1.1)
    audio_play_sound(snd_txttor,100,false)
}
if (writedisplay == true)
{
    for (i = (array_length_1d(global.flag) - 1); i &gt; -1; i--)
    {
        if (i != 25)
        {
            if (lastval[i] != global.flag[i])
                debug_message(((((("global.flag[" + string(i)) + "] has been changed from ") + string(lastval[i])) + " to ") + string(global.flag[i])))
        }
    }
    for (i = (array_length_1d(global.flag) - 1); i &gt; -1; i--)
        lastval[i] = global.flag[i]
}
//if !instance_exists(obj_essaystuff)
{
    if keyboard_check_pressed(ord("V"))
    {
        with (obj_solidparent)
        {
            visible = visible == false;
            scr_depth();
            image_alpha = 0.5;
        }
        with (obj_diagoparent)
        {
            visible = visible == false;
            scr_depth();
            image_alpha = 0.5;
        }
with (obj_doorparent)
{
visible = visible == false;
scr_depth();
depth -= 999999;
image_alpha = 1;
}
    }
    if keyboard_check_pressed(ord("Q"))
        room_speed = 1200;
    if keyboard_check_pressed(ord("W"))
        room_speed = 5;
    if keyboard_check_pressed(ord("I"))
        room_speed = 30;
}
if !keyboard_check(vk_shift) &amp;&amp; keyboard_check_pressed(ord("S"))
    drawinfo = drawinfo == false;
else if keyboard_check_pressed(ord("S"))
    showall = showall == false;
if (!keyboard_check(vk_alt) &amp;&amp; keyboard_check_pressed(vk_tab))
    {
    if (cutscenechecker == false)
    cutscenechecker = true;
    else
    cutscenechecker = false;
    var onoff = "Off";
    if (cutscenechecker == true)
    onoff = "On";
    debug_message("Cutscene info turned " + onoff);
    audio_play_sound(snd_pombark,80,false);
    }
if keyboard_check(vk_space)
{
waitforit++;
if (waitforit &gt;= 10 and !freemode)
    {
    freemode = true;
    if instance_exists(obj_mainchara)
    {
    obj_mainchara.cutscene = true;
    view_object[0] = noone
    }
    ogx = undefined;
    ogy = undefined;
    zoom = 0;
    type = scr_checkresolution();
    }
}
else if (freemode == 1)
{
waitforit = 0;
freemode = false;
if instance_exists(obj_mainchara)
{
obj_mainchara.cutscene = false;
view_object[0] = obj_mainchara;
}
view_wview[0] = 320 * type + 1
view_hview[0] = 240 * type + 1
}
else if (waitforit)
waitforit--;
else if keyboard_check_pressed(vk_f6)
    {
    if (freemode == 2)
        {
        waitforit = 0;
        freemode = false;
        if instance_exists(obj_mainchara)
            {
            obj_mainchara.cutscene = false;
            view_object[0] = obj_mainchara;
            }
        view_wview[0] = 320 * type + 1
        view_hview[0] = 240 * type + 1
        }
    else
        {
        freemode = 2;
        if instance_exists(obj_mainchara)
            {
            obj_mainchara.cutscene = true;
            view_object[0] = noone
            }
        ogx = undefined;
        ogy = undefined;
        zoom = 0;
        type = scr_checkresolution();
        }
    }
if (freemode)
    {
    if mouse_check_button(mb_left)
        {
        if (ogx == undefined)
            {
            ogx = mouse_x;
            ogy = mouse_y;
            }
        view_xview[0] = ogx - mouse_x
        view_yview[0] = ogy - mouse_y
        }
    else
    {
    ogx = undefined;
    ogy = undefined;
    }
    if mouse_wheel_up()
    zoom -= 10 * type + 1;
    if mouse_wheel_down()
    zoom += 10 * type + 1;
    view_wview[0] = 320 * (type + 1) + zoom * 320/240
    view_hview[0] = 240 * (type + 1) + zoom
    }
if keyboard_check_pressed(ord("R")) &amp;&amp; room != room_intromenu
    room_restart();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i, cutcontroller;
if (debug_mode = true &amp;&amp; cutscenechecker)
{
cutcontroller = array_create(1);
for (i = 0; i &lt; instance_count; i++)
    {
    with instance_id[i]
        {
        if variable_instance_exists(id, "con") || variable_instance_exists(id, "conversation")
            {
            cutcontroller[array_length_1d(cutcontroller) - 1] = instance_id[i];
            }
        }
    }
for (i = 0; i &lt; array_length_1d(cutcontroller); i++)
{
with (cutcontroller[i])
{
var ccon = 0;
if variable_instance_exists(id, "con")
ccon = con;
else if variable_instance_exists(id, "conversation")
ccon = conversation;
var mystring = object_get_name(object_index) + ": con=" + string(ccon);
var factor = i;
if instance_exists(obj_debug_gui)
factor += obj_debug_gui.messagecount + 1;
for (var j = 1; j &lt; factor; j++)
mystring = ("#" + mystring);
    var fnt = fnt_maintext;
    draw_set_font(fnt_maintext); //also originally sans
    var col = draw_get_color();
    draw_set_color(c_black);
    draw_text_transformed(7, 7, (mystring), 1, 1, 0);
    draw_text_transformed(9, 7, (mystring), 1, 1, 0);
    draw_text_transformed(9, 9, (mystring), 1, 1, 0);
    draw_text_transformed(7, 9, (mystring), 1, 1, 0);
    draw_set_color(c_red);
    draw_text_transformed(8, 8, (mystring), 1, 1, 0);
    draw_set_color(col);
    draw_set_font(fnt);
}
}
}
if (writedisplay == true)
{
    debug_printline(("instance_count=" + string(instance_count)), 1)
    if (instance_count &gt; 150)
        debug_printline("THAT'S A LOT OF INSTANCES", 2)
}
lastval[0] = 0
if (interactshower == true)
{
    draw_set_color(c_yellow)
    draw_set_font(fnt_main)
    draw_text_outline(20, 20, ("global.interact=" + string(global.interact)), c_black)
    draw_set_color(c_white)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var object, objectx, objecty, i, objectindex, selecting, curselected, isbattle, remcolor, remfont, yoffset, options, optionname, color, optioncon, newsprite, oldsprite, _remx, _remy, varname, newval, vartype, scriptname, argumentcount, _argument, flag, flagval, createobject, reset, sprite, cutcontroller;

object = array_create(instance_count);
objectx = array_create(instance_count);
objecty = array_create(instance_count);
objectindex = array_create(instance_count);
selecting = false;
curselected = noone;

if (drawinfo == true)
{
    for (i = 0; i &lt; instance_count; i++)
    {
        object[i] = instance_id[i];
        with (object[i])
        {
            objectx[i] = x;
            objecty[i] = y;
            objectindex[i] = object_index; // yeah i am too lazy to add a dot, and?
        }
        if instance_exists(objectindex[i])
        {
            if scr_checkresolution()
            {
                if (objectindex[i] != obj_solidparent &amp;&amp; objectindex[i] != obj_diagoparent &amp;&amp; objectindex[i] != obj_solidsmall &amp;&amp; objectindex[i] != obj_fader &amp;&amp; objectindex[i] != obj_persistentfader &amp;&amp; objectindex[i] != obj_unfader &amp;&amp; objectindex[i] != obj_battlefader)
                {
                    if scr_ishovering(objectx[i], objecty[i], max(object[i].sprite_width)) &amp;&amp; drawwindow == false
                    {
                        draw_rectangle_color(objectx[i] - 40, objecty[i] - 45, objectx[i] - 40 + string_length(object_get_name(objectindex[i])) * 8, objecty[i], c_black, c_black, c_black, c_black, false);
                        draw_text_safe(objectx[i] - 32, objecty[i] - 45, object_get_name(objectindex[i]), c_white, fnt_maintext,false,false,false,false,false);
                        draw_text_safe(objectx[i] - 32, objecty[i] - 30, "x: " + string(objectx[i]), c_white, fnt_maintext,false,false,false,false,false);
                        draw_text_safe(objectx[i] - 32, objecty[i] - 18, "y: " + string(objecty[i]), c_white, fnt_maintext,false,false,false,false,false);
                        d3d_set_fog(true, c_white, 0, 0);
                        if (object[i].sprite_index == -1)
                            sprite = spr_nothing;
                        else
                            sprite = object[i].sprite_index;
                        draw_sprite_ext(sprite, object[i].image_index, objectx[i], objecty[i], object[i].image_xscale, object[i].image_yscale, object[i].image_angle, c_white, 0.25);
                        d3d_set_fog(false, c_black, 0, 0);
                        selecting = true;
                        curselected = object[i];
                    }
                }
            }
            else
            {
                if (objectindex[i] != obj_solidparent &amp;&amp; objectindex[i] != obj_diagoparent &amp;&amp; objectindex[i] != obj_solidsmall &amp;&amp; objectindex[i] != obj_fader &amp;&amp; objectindex[i] != obj_persistentfader &amp;&amp; objectindex[i] != obj_unfader &amp;&amp; objectindex[i] != obj_battlefader)
                {
                    if scr_ishovering(objectx[i], objecty[i], max(object[i].sprite_width)) &amp;&amp; drawwindow == false // i really don't like this name but i couldn't think of a better one.
                    {
                        draw_rectangle_color(objectx[i] - 20, objecty[i] - 22.5, objectx[i] - 20 + string_length(object_get_name(objectindex[i])) * 4, objecty[i], c_black, c_black, c_black, c_black, false);
                        draw_text_safe(objectx[i] - 16, objecty[i] - 22.5, object_get_name(objectindex[i]), c_white, fnt_maintext, 0.5, 0.5,false,false,false);
                        draw_text_safe(objectx[i] - 16, objecty[i] - 15, "x: " + string(objectx[i]), c_white, fnt_maintext, 0.5, 0.5,false,false,false);
                        draw_text_safe(objectx[i] - 16, objecty[i] - 9, "y: " + string(objecty[i]), c_white, fnt_maintext, 0.5, 0.5,false,false,false);
                        d3d_set_fog(true, c_white, 0, 0);
                        if (object[i].sprite_index != -1)
                            sprite = object[i].sprite_index;
                        else
                            sprite = spr_nothing;
                        draw_sprite_ext(sprite, object[i].image_index, objectx[i], objecty[i], object[i].image_xscale, object[i].image_yscale, object[i].image_angle, c_white, 0.25);
                        d3d_set_fog(false, c_black, 0, 0);
                        selecting = true;
                        curselected = object[i];
                    }
                }
            }
        }
    }
    if (showall == true)
    {
        for (i = 0; i &lt; instance_count; i++)
        {
            if instance_exists(objectindex[i])
            {
                if scr_checkresolution()
                {
                    draw_rectangle_color(objectx[i] - 40, objecty[i] - 45, objectx[i] - 40 + string_length(object_get_name(objectindex[i])) * 8, objecty[i], c_black, c_black, c_black, c_black, false);
                    draw_text_safe(objectx[i] - 32, objecty[i] - 45, object_get_name(objectindex[i]), c_white, fnt_maintext,false,false,false,false,false);
                    draw_text_safe(objectx[i] - 32, objecty[i] - 30, "x: " + string(objectx[i]), c_white, fnt_maintext,false,false,false,false,false);
                    draw_text_safe(objectx[i] - 32, objecty[i] - 18, "y: " + string(objecty[i]), c_white, fnt_maintext,false,false,false,false,false);
                }
                else
                {
                    draw_rectangle_color(objectx[i] - 20, objecty[i] - 22.5, objectx[i] - 20 + string_length(object_get_name(objectindex[i])) * 4, objecty[i], c_black, c_black, c_black, c_black, false);
                    draw_text_safe(objectx[i] - 16, objecty[i] - 22.5, object_get_name(objectindex[i]), c_white, fnt_maintext, 0.5, 0.5,false,false,false);
                    draw_text_safe(objectx[i] - 16, objecty[i] - 15, "x: " + string(objectx[i]), c_white, fnt_maintext, 0.5, 0.5,false,false,false);
                    draw_text_safe(objectx[i] - 16, objecty[i] - 9, "y: " + string(objecty[i]), c_white, fnt_maintext, 0.5, 0.5,false,false,false);
                }
            }
        }
    }
    if (selecting == true &amp;&amp; objectselected != curselected)
    {
        if mouse_check_button_pressed(mb_left) // why is it so goddamn long.
        {
            d3d_set_fog(true, c_red, 0, 0);
            if (curselected.sprite_index != -1)
                sprite = curselected.sprite_index;
            else
                sprite = spr_nothing;
            draw_sprite_ext(sprite, curselected.image_index, curselected.x, curselected.y, curselected.image_xscale, curselected.image_yscale, curselected.image_angle, c_red, 0.25);
            d3d_set_fog(false, c_black, 0, 0);
            objectselected = curselected;
            drawwindow = false;
            mouse_clear(mb_left);
            exit;
        }
    }
    else if (selecting == false &amp;&amp; mouse_check_button_pressed(mb_left) &amp;&amp; objectselected != noone &amp;&amp; drawwindow == false) || (!instance_exists(objectselected) &amp;&amp; objectselected != noone)
    {
        objectselected = noone;
        drawwindow = false;
        mouse_clear(mb_left);
        exit;
    }
    if (objectselected != noone &amp;&amp; instance_exists(objectselected))
    {
        d3d_set_fog(true, c_yellow, 0, 0);
        if (objectselected.sprite_index != -1)
            sprite = objectselected.sprite_index;
        else
            sprite = spr_nothing;
        draw_sprite_ext(sprite, objectselected.image_index, objectselected.x, objectselected.y, objectselected.image_xscale, objectselected.image_yscale, objectselected.image_angle, c_yellow, 0.25);
        d3d_set_fog(false, c_black, 0, 0);

        if (drawwindow == false)
        {
            if mouse_check_button(mb_left)
            {   
                hold++;
                if (hold &gt;= 5)
                {
                    objectselected.x = mouse_x - (objectselected.sprite_width/2);
                    objectselected.y = mouse_y - (objectselected.sprite_height/2);
                }
            }
            if mouse_check_button_released(mb_left)
            {
                hold = 0;
            }
        }
        if mouse_check_button_pressed(mb_right)
        {
            drawwindow = true;
            remx = window_view_mouse_get_x(0) - view_xview;
            remy = window_view_mouse_get_y(0) - view_yview;
            exit;
        }
        with (objectselected)
        {
            if obj_time.down
                y += 1;
            if obj_time.up
                y -= 1;
            if obj_time.right
                x += 1;
            if obj_time.left
                x -= 1;
        }
        if (drawwindow == true)
        {
            _remx = remx;
            _remy = remy;
            remx += view_xview; // idfk what to do here, it doesn't work. update: i did it.
            remy += view_yview;
            isbattle = 1;
            if scr_checkresolution()
                isbattle = 2;
            remcolor = draw_get_color();
            remfont = fnt_maintext;
            options = 6;
            optionname = array_create(options);
            optionname[0] = "Change Sprite Index";
            optionname[1] = "Change Object Value";
            optionname[2] = "Change Global Value";
            optionname[3] = "Apply Script";
            optionname[4] = "Copy Object";
            optionname[5] = "Destroy Object";
            curselected = -1;
            optioncon = -1;
            for (i = 0; i &lt; options; i++)
            {
                yoffset = i * (16*isbattle);
                draw_set_color(c_white);
                ossafe_fill_rectangle(remx, remy + 2*isbattle, remx + 80*isbattle, (remy+(22*isbattle)+yoffset));
                draw_set_color(c_black);
                ossafe_fill_rectangle(remx + 2*isbattle, remy + 4*isbattle, remx + 78*isbattle, (remy+(20*isbattle)+yoffset));
            }
            for (i = 0; i &lt; options; i++)
            {
                yoffset = i * (16*isbattle);
                color = c_white;
                if scr_ishovering(remx+40*isbattle, (remy+8*isbattle) + yoffset, 8)
                {
                    color = c_yellow;
                    curselected = i;
                }
                draw_set_halign(fa_center);
                draw_text_safe(remx+40*isbattle, (remy+8*isbattle) + yoffset, optionname[i], color, fnt_maintext, 0.5*isbattle, 0.5*isbattle,false,false,false);
                draw_set_halign(fa_left);
                draw_set_color(merge_color(c_gray, c_black, 0.5))
                if (i != options - 1)
                    ossafe_fill_rectangle(remx + 29*isbattle, (remy + 20*isbattle + yoffset), remx + 50*isbattle, (remy + 20 *isbattle + yoffset));
            }
            draw_set_color(remcolor);
            draw_set_font(remfont);
            if mouse_check_button_pressed(mb_left)
            {
                if (curselected == -1)
                {
                    drawwindow = false;
                    mouse_clear(mb_left);
                }
                else
                {
                    optioncon = curselected;
                    audio_play_sound(snd_select,80,false);}
            }
            remx = _remx;
            remy = _remy;
            
            if (optioncon == 0)
            {
                oldsprite = objectselected.sprite_index;
                if (oldsprite == -1)
                    oldsprite = "(No sprite)";
                else
                    oldsprite = sprite_get_name(oldsprite);
                newsprite = safe_message(1, "Current Sprite: " + oldsprite + ". Please input a new sprite name.", "spr_nothing");
                if (newsprite != "")
                {
                    newsprite = asset_get_index(newsprite);
                    if (newsprite == -1 || !sprite_exists(newsprite))
                        safe_message(0, "Sprite non existent!", "");
                    else
                        objectselected.sprite_index = newsprite;
                }
                else
                    safe_message(0, "Operation cancelled.", "");
                optioncon = -1;
            }
            if (optioncon == 1)
            {
                varname = safe_message(1, "Current Object: " + object_get_name(objectselected.object_index) + ". Please input a variable name.", "");
                if (varname != "")
                {
                    if !variable_instance_exists(objectselected, varname)
                        safe_message(0, "Variable non existent!", "");
                    else
                    {
                        vartype = variable_instance_get(objectselected, varname);
                        if is_string(vartype)
                            vartype = "STRING";
                        else if is_real(vartype)
                            vartype = "REAL";
else if is_bool(vartype)
vartype = "BOOLEAN";
                        else if is_array(vartype)
                        {
                            safe_message(0, "Arrays currently not supported (because I'm too lazy)\nsorry.", "");
                            optioncon = -1;
                            exit;
                        }
var _val = "";
if (vartype == "BOOLEAN")
{
_val = variable_instance_get(objectselected, varname);
if (_val == false)
_val = "false";
if (_val == true)
_val = "true";
}
else
_val = string(variable_instance_get(objectselected, varname));
                        newval = safe_message(1, string(varname) + " is currently " + "''" + _val + "''" + ". Please input a new " + string(vartype) + " value.", _val);
                        if (newval != "")
                        {
                            if (vartype == "STRING")
                                variable_instance_set(objectselected, varname, newval);
if (vartype == "BOOLEAN")
{
if (string_lower(newval) == "true")
variable_instance_set(objectselected, varname, true);
else if (string_lower(newval) == "false")
variable_instance_set(objectselected, varname, false);
else if (string_digits(newval) == "1")
variable_instance_set(objectselected, varname, true);
else if (string_digits(newval) == "0")
variable_instance_set(objectselected, varname, false);
                            else
                                safe_message(0, "Error: No BOOLEAN value was input.", "");                        
}
                            if (vartype == "REAL" &amp;&amp; string_digits(newval) != "")
                                variable_instance_set(objectselected, varname, real(newval));
                            else if (vartype == "REAL")
                                safe_message(0, "Error: No REAL value was input.", "");                        
                        }
                        else
                            safe_message(0, "Operation cancelled.", "");
                        optioncon = -1;
                    }
                }
                else
                {
                    safe_message(0, "Operation cancelled.", "");
                    optioncon = -1;
                }
            }
            if (optioncon == 2)
            {
                varname = safe_message(1, "Please input a GLOBAL variable name.", "");
                if (varname != "")
                {
                    if !variable_global_exists(varname)
                        safe_message(0, "Global variable non existent!", "");
                    else
                    {
                        vartype = variable_global_get(varname);
                        if is_string(vartype)
                            vartype = "STRING";
                        else if is_real(vartype)
                            vartype = "REAL";
else if is_bool(vartype)
vartype = "BOOLEAN";
                        else if is_array(vartype)
                        {
                            safe_message(0, "Arrays currently not supported (because I'm too lazy)\nsorry.", "");
                            optioncon = -1;
                            exit;
                        }
var _val = "";
if (vartype == "BOOLEAN")
{
_val = variable_global_get(varname);
if (_val == false)
_val = "false";
if (_val == true)
_val = "true";
}
else
_val = string(variable_global_get(varname));
                        newval = safe_message(1, string(varname) + " is currently " + "''" + _val + "''" + ". Please input a new " + vartype + " value.", _val);
                        if (newval != "")
                        {
                            if (vartype == "STRING")
                                variable_global_set(varname, newval);
if (vartype == "BOOLEAN")
    {
    if (string_lower(newval) == "true")
    variable_global_set(varname, true);
    else if (string_lower(newval) == "false")
    variable_global_set(varname, false);
    else if (string_digits(newval) == "1")
    variable_global_set(varname, true);
    else if (string_digits(newval) == "0")
    variable_global_set(varname, false);
                                else
                                    safe_message(0, "Error: No BOOLEAN value was input.", "");                        
    }
                            if (vartype == "REAL" &amp;&amp; string_digits(newval) != "")
                                variable_global_set(varname, real(newval));
                            else if (vartype == "REAL")
                                safe_message(0, "Error: No REAL value was input.", "");                        
                        }
                        else
                            safe_message(0, "Operation cancelled.", "");
                        optioncon = -1;
                    }
                }
                else
                {
                    safe_message(0, "Operation cancelled.", "");
                    optioncon = -1;
                }
            }
            if (optioncon == 3)
            {
                argumentcount = -1;
                scriptname = safe_message(1, "Please input a script name.", "scr_");
                if (scriptname != "")
                {
                    if !script_exists(asset_get_index(scriptname))
                    {
                        safe_message(0, "Script non existent!", "");
                        optioncon = -1;
                        exit;
                    }
                    else
                    {
                        argumentcount = safe_message(1, "Input the desired argument count for " + scriptname + ".", "");
                        if (argumentcount != "")
                        {
                            argumentcount = string_digits(argumentcount);
                        }
                        if (argumentcount == "")
                            argumentcount = -1;
                        else
                            argumentcount = real(argumentcount);
                        if (argumentcount &gt; 15)
                            argumentcount = 15;
                        _argument = array_create(16);
                        for (i = 0; i &lt; 16; i++)
                            _argument[i] = "null";
                        if (argumentcount &gt; -1)
                        {
                            for (i = 0; i &lt; argumentcount+1; i++)
                            {
                                _argument[i] = safe_message(1, "Input the value of argument" + string(i), "");
                                if string_digits(_argument[i]) != ""
                                    _argument[i] = real(_argument[i]);
                                else
                                    _argument[i] = string_letters(_argument[i]);
                            }
                        }
                        with (objectselected)
                            script_execute(asset_get_index(scriptname), _argument[0], _argument[1], _argument[2], _argument[3], _argument[4], _argument[5], _argument[6], _argument[7], _argument[8], _argument[9], _argument[10], _argument[11], _argument[12], _argument[13], _argument[14], _argument[15]);
                        optioncon = -1;
                    }
                }
                else
                {
                    safe_message(0, "Operation cancelled.", "");
                    optioncon = -1;
                }
            }
            if (optioncon == 4)
            {
                with (objectselected)
                {
var newobj = instance_copy(true);
                    with (newobj)
                    {
                        x += sprite_width;
                        audio_stop_sound(snd_select);
                        audio_play_sound(snd_egg,80,false);
                    }
                }
                optioncon = -1;
            }
            if (optioncon == 5)
            {
                scr_badexplosion(objectselected.x, objectselected.y, 0.5, objectselected.depth);
                instance_destroy(objectselected);
                objectselected = noone;
                drawwindow = false;
                optioncon = -1;
                exit;
            }
            /*
            ossafe_fill_rectangle(remx + 4*isbattle, remy + 16*isbattle, remx + 76*isbattle, remy+16*isbattle);
            draw_text_safe(remx + 7*isbattle, remy+20*isbattle, "Change Object Value", c_white, fnt_maintext, 0.5*isbattle, 0.5*isbattle); // second option
            ossafe_fill_rectangle(remx + 4*isbattle, remy + 30*isbattle, remx + 76*isbattle, remy+30*isbattle);
            draw_text_safe(remx + 7*isbattle, remy+32*isbattle, "Apply Script", c_white, fnt_maintext, 0.5*isbattle, 0.5*isbattle); // third option
            ossafe_fill_rectangle(remx + 4*isbattle, remy + 34*isbattle, remx + 76*isbattle, remy+34*isbattle);
            draw_text_safe(remx + 7*isbattle, remy+45*isbattle, "Destroy Object", c_white, fnt_maintext, 0.5*isbattle, 0.5*isbattle); // fourth and last (currently) option*/
            
        }
    }
    else if (objectselected == noone || !instance_exists(objectselected))
    {
        if mouse_check_button_pressed(mb_right)
        {
            drawwindow = true;
            remx = window_view_mouse_get_x(0) - view_xview;
            remy = window_view_mouse_get_y(0) - view_yview;
            mouse_clear(mb_right);
            exit;
        }
        
        if (drawwindow == true)
        {
            _remx = remx;
            _remy = remy;
            remx += view_xview; // idfk what to do here, it doesn't work. update: i did it.
            remy += view_yview;
            isbattle = 1;
            if scr_checkresolution()
                isbattle = 2;
            remcolor = draw_get_color();
            remfont = fnt_maintext;
            options = 6;
            optionname = array_create(options);
            optionname[0] = "Create Instance";
            optionname[1] = "Select Object";
            optionname[2] = "Change Global Value";
            optionname[3] = "Execute Script";
            optionname[4] = "Change Flag";
            optionname[5] = "Reset All Data";
            curselected = -1;
            optioncon = -1;
            for (i = 0; i &lt; options; i++)
            {
                yoffset = i * (16*isbattle);
                draw_set_color(c_white);
                ossafe_fill_rectangle(remx, remy + 2*isbattle, remx + 80*isbattle, (remy+(22*isbattle)+yoffset));
                draw_set_color(c_black);
                ossafe_fill_rectangle(remx + 2*isbattle, remy + 4*isbattle, remx + 78*isbattle, (remy+(20*isbattle)+yoffset));
            }
            for (i = 0; i &lt; options; i++)
            {
                yoffset = i * (16*isbattle);
                color = c_white;
                if scr_ishovering(remx+40*isbattle, (remy+8*isbattle) + yoffset, 8)
                {
                    color = c_yellow;
                    curselected = i;
                }
                draw_set_halign(fa_center);
                draw_text_safe(remx+40*isbattle, (remy+8*isbattle) + yoffset, optionname[i], color, fnt_maintext, 0.5*isbattle, 0.5*isbattle,false,false,false);
                draw_set_halign(fa_left);
                draw_set_color(merge_color(c_gray, c_black, 0.5))
                if (i != options - 1)
                    ossafe_fill_rectangle(remx + 29*isbattle, (remy + 20*isbattle + yoffset), remx + 50*isbattle, (remy + 20 *isbattle + yoffset));
            }
            draw_set_color(remcolor);
            draw_set_font(remfont);
            if mouse_check_button_pressed(mb_left)
            {
                if (curselected == -1)
                {
                    objectselected = noone;
                    drawwindow = false;
                    mouse_clear(mb_left);
                }
                else
                {
                    optioncon = curselected;
                    audio_play_sound(snd_select,80,false);}
            }
            remx = _remx;
            remy = _remy;
                
            if (optioncon == 4)
            {
                flag = safe_message(1, "Please input a flag index.", "");
                if (flag != "")
                {
                    flag = string_digits(flag);
                    if (flag == "")
                    {
                        safe_message(0, "Input a number, not a string!", "");
                        optioncon = -1;
                        exit;
                    }
                    if (real(flag)) &gt;= 1000
                        flag = "999";
                    flagval = global.flag[real(flag)];
                    newval = safe_message(1, "Flag[" + flag + "] is " + "''" + string(flagval) + "''. Input a new REAL value.", string(flagval));
                    if (newval != "")
                    {
                        if (string_digits(newval) != "")
                            global.flag[real(flag)] = real(newval);
                        else
                            safe_message(0, "The new value must be a REAL type!", "");
                    }
                    else
                        safe_message(0, "Operation cancelled.", "");
                    // Korobeiniki goes hard.
                }
                else
                    safe_message(0, "Operation cancelled.", "");
                optioncon = -1;
            }
            if (optioncon == 1)
            {
                object = safe_message(1, "Input the object's name you are searching for.", "obj_");
                if (object != "")
                {
                    if object_exists(asset_get_index(object))
                    {
                        objectselected = instance_find(asset_get_index(object), 0);
                        if (!instance_exists(objectselected))
                        {
                            createobject = safe_message(2, "The given object is not currently present. Would you like to create it?", "");
                            if (createobject == true)
                            {
                                objectselected = instance_create(mouse_x, mouse_y, asset_get_index(object));
                            }
                            else
                                objectselected = noone;
                        }
                    }
                    else
                        safe_message(0, "Object non existent!", "");
                }
                else
                    safe_message(0, "Operation cancelled.", "");
                optioncon = -1;
            }
            if (optioncon == 2)
            {
                varname = safe_message(1, "Please input a GLOBAL variable name.", "");
                if (varname != "")
                {
                    if !variable_global_exists(varname)
                        safe_message(0, "Global variable non existent!", "");
                    else
                    {
                        vartype = variable_global_get(varname);
                        if is_string(vartype)
                            vartype = "STRING";
                        else if is_real(vartype)
                            vartype = "REAL";
else if is_bool(vartype)
vartype = "BOOLEAN";
                        else if is_array(vartype)
                        {
                            safe_message(0, "Arrays currently not supported (because I'm too lazy)\nsorry.", "");
                            optioncon = -1;
                            exit;
                        }
var _val = "";
if (vartype == "BOOLEAN")
{
_val = variable_global_get(varname);
if (_val == false)
_val = "false";
if (_val == true)
_val = "true";
}
else
_val = string(variable_global_get(varname));
                        newval = safe_message(1, string(varname) + " is currently " + "''" + _val + "''" + ". Please input a new " + string(vartype) + " value.", _val);
                        if (newval != "")
                        {
                            if (vartype == "STRING")
                                variable_global_set(varname, newval);
if (vartype == "BOOLEAN")
{
if (string_lower(newval) == "true")
variable_global_set(varname, true);
else if (string_lower(newval) == "false")
variable_global_set(varname, false);
else if (string_digits(newval) == "1")
variable_global_set(varname, true);
else if (string_digits(newval) == "0")
variable_global_set(varname, false);
                            else
                                safe_message(0, "Error: No BOOLEAN value was input.", "");                        
}
                            if (vartype == "REAL" &amp;&amp; string_digits(newval) != "")
                                variable_global_set(varname, real(newval));
                            else if (vartype == "REAL")
                                safe_message(0, "Error: No REAL value was input.", "");                        
                        }
                        else
                            safe_message(0, "Operation cancelled.", "");
                        optioncon = -1;
                    }
                }
                else
                {
                    safe_message(0, "Operation cancelled.", "");
                    optioncon = -1;
                }
            }
            if (optioncon == 3)
            {
                argumentcount = -1;
                scriptname = safe_message(1, "Please input a script name.", "scr_");
                if (scriptname != "")
                {
                    if !script_exists(asset_get_index(scriptname))
                    {
                        safe_message(0, "Script non existent!", "");
                        optioncon = -1;
                        exit;
                    }
                    else
                    {
                        argumentcount = safe_message(1, "Input the desired argument count for " + scriptname + ".", "");
                        if (argumentcount != "")
                        {
                            argumentcount = string_digits(argumentcount);
                        }
                        if (argumentcount == "")
                            argumentcount = -1;
                        else
                            argumentcount = real(argumentcount);
                        if (argumentcount &gt; 15)
                            argumentcount = 15;
                        _argument = array_create(16);
                        for (i = 0; i &lt; 16; i++)
                            _argument[i] = "null";
                        if (argumentcount &gt; -1)
                        {
                            for (i = 0; i &lt; argumentcount+1; i++)
                            {
                                _argument[i] = safe_message(1, "Input the value of argument" + string(i), "");
                                if string_digits(_argument[i]) != ""
                                    _argument[i] = real(_argument[i]);
                                else
                                    _argument[i] = string_letters(_argument[i]);
                            }
                        }
                        script_execute(asset_get_index(scriptname), _argument[0], _argument[1], _argument[2], _argument[3], _argument[4], _argument[5], _argument[6], _argument[7], _argument[8], _argument[9], _argument[10], _argument[11], _argument[12], _argument[13], _argument[14], _argument[15]);
                            optioncon = -1;
                    }
                }
                else
                {
                    safe_message(0, "Operation cancelled.", "");
                    optioncon = -1;
                }
            }
            if (optioncon == 0)
            {
                object = safe_message(1, "Please input the desired object's name.", "obj_");
                if (object != "")
                {
                    if (object_exists(asset_get_index(object)))
                        instance_create(mouse_x, mouse_y, asset_get_index(object));
                    else
                        safe_message(0, "Object non existent!", "");
                }
                else
                    safe_message(0, "Operation Cancelled", "");
                optioncon = -1;
            }
            if (optioncon == 5)
            {
                reset = safe_message(2, "Are you sure you want to erase ALL data?", "");
                if (reset == true)
                {
                    directory_destroy(working_directory);
                    safe_message(0, "Done. A restart of the game is required to work properly.", "");
                    game_restart();
                }
                else
                    safe_message(0, "Operation Cancelled", "");
                optioncon = -1;
            }       
        }
    }
//draw_sprite_ext(spr_mouse, 0, mouse_x, mouse_y, 0.5*(scr_checkresolution()+1), 0.5*(scr_checkresolution()+1), image_angle, image_blend, image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="116">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>overlay = overlay == false;
show_debug_overlay(overlay);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="114">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var nextroom = get_string("roomname or id:", room)
if (nextroom == "")
	exit;
if string_letters(nextroom) != ""
{
	if asset_get_index(nextroom) != undefined
		room_goto(asset_get_index(nextroom));
	else
		show_message("room doesn't exist.");
}
else
{
	if (real(nextroom)) &lt;= room_last
		room_goto(real(nextroom));
	else
		show_message("room index doesn't exist.");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
